group = 'dk.cachet.carp.protocols.core'
version = '1.0.0-alpha.1'

buildscript {
    ext.kotlin_version = '1.2.50'
    ext.serialization_version = '0.5.1'
    ext.dokka_version = '0.9.17'

    repositories {
        jcenter()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'


sourceSets {
    main.kotlin.srcDirs += 'src/main'
    test.kotlin.srcDirs += 'src/test'
}

repositories {
    jcenter()
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    implementation 'com.beust:klaxon:3.0.1'

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

test {
    useJUnitPlatform()
}


// Create a javadoc .jar.
dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar) {
    group JavaBasePlugin.DOCUMENTATION_GROUP
    description 'Create javadoc jar using Dokka'
    classifier 'javadoc'
    from dokka
}


// Publish main .jar and javadoc .jar as a maven package.
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url "$buildDir/repository"
        }
    }
}


/*
Configure the 'sign' task to sign all files part of the maven package.
For signing to work, a 'signing.properties' file needs to be added to the root containing the OpenPGP signature credentials:
> signing.keyId=<LAST 8 SYMBOLS OF KEY ID>
> signing.password=<SECRET>
> signing.secretKeyRingFile=<ABSOLUTE PATH TO THE SECRET KEY RING FILE WITH PRIVATE KEY>
*/
signing {
    sign publishing.publications.mavenJava
}

task publishSigned {
    doFirst {
        def signingProperties = new Properties()
        signingProperties.load(new FileInputStream(rootProject.file('signing.properties')))
        allprojects { ext."signing.keyId" = signingProperties['signing.keyId'] }
        allprojects { ext."signing.password" = signingProperties['signing.password'] }
        allprojects { ext."signing.secretKeyRingFile" = signingProperties['signing.secretKeyRingFile'] }
    }
}

publishSigned.finalizedBy publish


